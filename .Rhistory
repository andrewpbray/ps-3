Introduction to Probability with Texas Hold'em Examples
x <- matrix(runif(1000*1000), nrow = 1000)
system.time(solve(x))
x <- rgamma(30, 3, 4)
plot(density(x))
y <- rexp(30, 7)
plot(density(y))
y <- rexp(30, 15)
plot(density(y))
y <- rexp(30, 4)
plot(density(y))
plot(x, y)
d <- read.csv("../plants-all-bogs.csv")
shiny::runGitHub('Thesis_Base','deanyoung')
library(devtools)
install_github("andrewpbray/oilabs")
?oilabs
library(spatstat)
library(MASS)
set.seed(1234)
#set the desired window.
my_window <- owin(xrange = c(-1, 12), yrange = c(-1, 12))
#Run simulation with homogenous poisson process with intensity lambda = 0.5
simulation_a <- rpoispp(0.5, win = my_window)
#Run simulation with homogenous poisson process with intensity lambda = 4
simulation_b <- rpoispp(4, win = my_window )
plot(simulation_a)
class(simulation_a)
?plot.ppp
plot(simulation_a)
summary(simulation_a)
summary(simulation_b)
plot(simulation_b)
simulation_c <-  rpoispp(lambda = lambda_c, win = my_window)
mvdnorm <- function(x, y, mu, sigma){
p <- c(x, y)
(2 * pi)^{-1} * det(sigma)^{-1 / 2} * exp(-1 / 2 * (t(p-mu) %*% solve(sigma) %*% (p-mu)))
}
mvdnorm_for_rpoispp <- function(x, y, mu, sigma){
d <- rep(NA, length(x))
for(i in 1:length(d)){
d[i] <- mvdnorm(x[i], y[i], mu, sigma)
}
return(d)
}
my_mu <- c(5, 5)
my_sigma <- matrix(c(3, 0.5*sqrt(6), 0.5*sqrt(6), 2), nrow = 2, byrow = T)
lambda_c <- function(x, y) {100 * mvdnorm_for_rpoispp(x, y, my_mu, my_sigma)}
simulation_c <-  rpoispp(lambda = lambda_c, win = my_window)
plot(simulation_c)
lambda_d <- function(x, y){
l <- rep(4, length(x))
for(i in 1:length(l))
if(x[i]<6) l[i] = 0.2
l
}
simulation_d <- rpoispp(lambda_d, win = my_window)
plot(simulation)d
plot(simulation_d)
my_lattice <- cbind(c(rep(1, 10), rep(2, 10), rep(3, 10), rep(4, 10), rep(5, 10),rep(6, 10), rep(7, 10), rep(8, 10), rep(9, 10), rep(10, 10)), rep(seq(1, 10), 10))
val_sets <- function(sets_number, total){
sample(1:total, size = total, replace = FALSE) %/% sets_number + 1
}
final <- cbind(val_sets(10, nrow(my_lattice)), my_lattice)
my_lattice
val_sets(10, nrow(my_lattice))
final
d2 <- function(a, b) (a[1]-b[1])^2 + (a[2]- b[2])^2
nearest_point <- function(x, y, d){
my_min <- c(NA, NA, Inf)
for(i in 1:nrow(d)){
current_distance <- d2(c(d[i,1], d[i,2]), c(x, y))
current_min <- my_min[3]
if(current_distance < current_min){
my_min <- c(d[i,1], d[i,2], current_distance)
}
}
my_min
}
?dist
d_values <- matrix(rep(NA, 3 * nrow(my_lattice)), nrow = nrow(my_lattice))
for(i in 1:nrow(my_lattice)){
d_values[i,] <- nearest_point(my_lattice[i, 1], my_lattice[i, 2], cbind(simulation_a$x, simulation_a$y))
}
final <- cbind(final, d_values)
head(final)
class(final)
names(final)
names(final) <- c("set", "sx", "sy", "nnx", "nny", "sqdist")
head(final)
colnames(final) <- c("set", "sx", "sy", "nnx", "nny", "sqdist")
head(final)
install.packages("deldir")
library(deldir)
library(spatstat)
?deldir
?dist
load("~/Dropbox/OpenIntro/packages/oilabs/data/bdims.rda")
View(bdims)
#' Generate simulated QQ plots
#'
#' Create a 3 x 3 grid of quantile-quantile plot, the first of which corresponds
#' to the input data. The other eight plots arise from simulating random normal
#' data with the same mean, standard deviation, and length as the data. For use
#' in comparing known-normal qqplots to an observed qqplot to assess normality.
#'
#' @param sample the variable to be plotted.
#' @param data data frame to use.
#'
#' @return A 3 x 3 grid of qqplots.
#' @export
qqnormsim <- function(sample, data) {
y <- eval(substitute(sample), data)
simnorm <- rnorm(n = length(y) * 8, mean = mean(y),
sd = sd(y))
df <- data.frame(x       = c(y, simnorm),
plotnum = rep(c("data", "sim 1", "sim 2",
"sim 3", "sim 4", "sim 5",
"sim 6", "sim 7", "sim 8"),
each = length(y)))
qplot(sample = x, data = df, stat = "qq", facets =  ~ plotnum)
}
save.image("~/Desktop/bdims.RData")
qqnormsim
qplot(x = hgt, data = bdims, geom = "histogram")
library(ggplot2)
qplot(x = hgt, data = bdims, geom = "histogram")
qplot(x = hgt, data = bdims, geom = "histogram", facets = sex)
qplot
?qplot
qqnormsim
qplot(x = hgt, data = bdims, geom = "histogram", facets = ~ sex)
qplot(x = hgt, data = bdims, fill = sex, geom = "density")
fdims <- bdims %>%
filter(sex == "f")
library(dplyr)
fdims <- bdims %>%
filter(sex == "m")
qplot(x = hgt, data = fdims, geom = "histogram")
qplot(x = hgt, data = bdims, geom = "histogram")
qplot(x = hgt, data = bdims, geom = "histogram", facet = ~ sex)
qplot(x = hgt, data = bdims, geom = "histogram", facets = ~ sex)
qplot(x = hgt, data = bdims, geom = "density", facets = ~ sex)
qplot(x = hgt, data = bdims, fill = sex, geom = "density")
qplot(x = hgt, data = bdims, fill = sex, geom = "density", alpha = .5)
qplot(sample = hgt, data = fdims, stat = "qq")
72.6 + 4.78
72.6 + 2*4.78
72.6 + 3*4.78
72.6  - 1*4.78
72.6  - 2*4.78
72.6  - 3*4.78
pnorm(80, 72.6, 4.78)
pnorm(60, 72.6, 4.78)
qnorm(.95, 72.6, 4.78)
pnorm(70, 72.6, 4.78)
library(devtools)
install_github
install_github('andrewpbray/lmmoptim')
install.packages("wesanderson")
?lmmoptim
library(devtools)
install_github("andrewpbray/oilabs")
a <- list()
class(a) <- "simpp"
a
class(a)
n <- 100
class(a) <- "simpp"
a$x <- rnorm(n)
a$y <- rnorm(n)
a$n <- n
attributes(a)
a$x
plot.simpp <- function(simpp) {
plot(simpp$x, simpp$y)
}
plot(a)
library(oilabs)
1-.95^20
install.packages("sna")
install.packages("ergm")
library(ergm)
library(sna)
?network
?ergm
install.packages("latentnet")
library(latentnet)
?ergmem
?ergmm
geoms <- rep(0, 10000)
for(i in 1:10000) {
x <- rnorm(500)
geoms[i] <- exp(mean(log(x)))
}
hist(geoms)
warnings()
?prod
for(i in 1:10000) {
x <- rnorm(500)
geoms[i] <- prod(x)^(1/length(x))
}
hist(geoms)
fitdist(geoms, dnorm, list(mean = .5, sd = .2))
fitdistr(geoms, dnorm, list(mean = .5, sd = .2))
library(MASS)
fitdistr(geoms, dnorm, list(mean = .5, sd = .2))
summary(geoms)
head(geoms)
for(i in 1:10000) {
x <- rnorm(100)
geoms[i] <- prod(x)^(1/length(x))
}
hist(geoms)
x <- rnorm(300)
for(i in 1:10000) {
x <- rnorm(300)
geoms[i] <- prod(x)^(1/length(x))
}
hist(geoms)
fitdistr(geoms, dnorm, list(mean = .5, sd = .2))
hist(geoms)
fitdistr(geoms, dnorm, list(mean = .5, sd = .2))
summary(geoms)
x <- seq(-10, 10, .001)
plot(x, exp(x))
exp(-10000)
x <- rnorm(300)
exp(mean(log(x)))
exp(mean(log(x)), na.rm = TRUE)
exp(mean(log(x), na.rm = TRUE))
prod(x)^(1/length(x))
exp(mean(x, na.rm = TRUE))
install.packages("lcavol")
install.packages("els")
library(nycflights)
library(nycflights13)
install.packages("nycflights13")
data()
library(nycflights13)
data()
head(weather)
View(weather)
View(flights)
data(oilabs)
library(devtools)
install_github("andrewpbray/oilabs")
data(cdc)
library(oilabs)
data(cdc)
View(cdc)
install.packages('ISLR')
library(ISLR)
data()
dim(Auto)
dim(Caracan)
dim(Caravan)
dim(Carseats)
dim(College)
dim(Default)
dim(Hitters)
dim(Khan)
data("Khan")
dim(Khan)
length(Khan)
Khan
names(Khan)
dim(NCI60)
?Khan
?NCI60
?OJ
?Portfolio
?Smarket
?Wage
download.file("http://www.openintro.org/stat/data/ames.RData", destfile = "ames.RData")
load("ames.RData")
plot_ci
library(devtools)
install_github("andrewpbray/oilabs")
?plot_ci
library(plot_ci)
library(oilabs)
?plot_ci
calc_streak()
calc_streak
?rle
x <- rev(rep(6:10, 1:5))
rle(x)
x
a <- rle(x)
class(a)
attributes(a)
rle(x)$lengths - 1
devtools::install_github("ismayc/rticles")
devtools::install_github("ismayc/rticles”)
devtools::install_github("ismayc/rticles")
?fortify
library(ggplot2)
?fortify
install.packages("xtable")
library(xtable)
?xtable
install.packages("statnetWeb")
library(statnetWeb)
run_wb()
run_sq()
run_sw()
library(mosaic)
mplot(mtcars)
install.packages("manipulate")
mplot(mtcars)
install.packages("shiny")
shiny::runGitHub("shiny-phyloseq","joey711")
install.packages("shiny")
shiny::runGitHub("shiny-phyloseq","joey711")
install.packages("shinythemes")
shiny::runGitHub("shiny-phyloseq","joey711")
install.packages("phyloseq")
library(ggplot2)
names(diamonds)
?kmeans
set.seed(2)
x=matrix(rnorm(50*2), ncol=2)
x[1:25,1]=x[1:25,1]+3
x[1:25,2]=x
[1:25,2]-4
set.seed(2)
x=matrix(rnorm(50*2), ncol=2)
x[1:25,1]=x[1:25,1]+3
x[1:25,2]=x[1:25,2]-4
x
install.packages("OIdata")
library(OIdata)
data()
install.packages("openintro")
library(openintro)
data()
?marioKart
install.packages("car")
library("car")
Download R Books
Complete Guide to 3D Plots in R: Static and interactive 3-dimension graphs
ggplot2: The Elements for Elegant Data Visualization in R
Install and load required packages
Prepare the data
The function scatter3d
Basic 3D scatter plots
Plot the points by groups
Default plot
Remove the surfaces
Add concentration ellipsoids
Change point colors by groups
Axes
Change axis labels:
Remove axis scales
Change axis colors
Add text labels for the points
Export images
See also
Infos
I recently posted an article describing how to make easily a 3D scatter plot in R using the package scatterplot3d.
This R tutorial describes how to perform an interactive 3d graphics using R software and the function scatter3d from the package car.
The function scatter3d() uses the rgl package to draw and animate 3D scatter plots.
3d scatter plot rgl
Install and load required packages
The packages rgl and car are required for this tutorial:
install.packages(c("rgl", "car"))
Note that, on Linux operating system, the rgl package can be installed as follow:
sudo apt-get install r-cran-rgl
Load the packages:
library("car")
Prepare the data
We’ll use the iris data set in the following examples :
data(iris)
install.packages(c("rgl", "car"))
data(iris)
sep.l <- iris$Sepal.Length
sep.w <- iris$Sepal.Width
pet.l <- iris$Petal.Length
scatter3d(formula, data)
scatter3d(x, y, z)
scatter3d(x = sep.l, y = pet.l, z = sep.w
)
scatter3d(x = sep.l, y = pet.l, z = sep.w,
point.col = "blue", surface=FALSE)
scatter3d(x = sep.l, y = pet.l, z = sep.w, groups = iris$Species)
scatter3d(x = sep.l, y = pet.l, z = sep.w, groups = iris$Species,
grid = FALSE)
library(mosaic)
data()
head(RailTrail)
?RailTrail
library(ggplot2)
qplot(x = avgtemp, y = volume, data = RailTrail)
m1 <- lm(volume ~ avgtemp + I(avgtemp^2), data = RailTrail)
summary(m1)
m1 <- lm(volume ~ avgtemp + avgtemp^2, data = RailTrail)
summary(m1)
install.packages("lme4")
library(lme4)
?lmer
head(sleepstudy)
dim(sleepstudy)
sleepstudy
head(sleepstudy)
(fm1 <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy))
summary(fm1)
library(ggplot2)
head(sleepstudy)
ggplot(sleepstudy, aes(y = Reaction, x = Days, group = Subject)) + geom_line()
ggplot(sleepstudy, aes(y = Reaction, x = Days, color = Subject)) + geom_line()
(fm2 <- lmer(Reaction ~ 1 + (1 | Subject), sleepstudy))
summary(mf2)
summary(fm2)
setwd("~/Dropbox/Teaching/math-243-2016s/labs/ps-3")
